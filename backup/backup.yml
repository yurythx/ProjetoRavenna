# =========================================================
# SISTEMA DE BACKUP AUTOMATIZADO - PROJETO RAVENNA
# =========================================================
# Descri√ß√£o: Sistema de backup di√°rio automatizado para configura√ß√µes
#            e dados do Projeto Ravenna (Chatwoot, N8N, Evolution)
# Frequ√™ncia: Di√°ria (24h)
# Reten√ß√£o: 30 dias
# Formato: .tar.gz compactado
# Localiza√ß√£o: /mnt/backup/ravenna/
# Conte√∫do: Volumes Docker dos servi√ßos do Projeto Ravenna
# =========================================================

services:
  backup-ravenna:
    image: alpine:latest
    container_name: backup-ravenna
    restart: unless-stopped
    
    # Configura√ß√µes de timezone
    environment:
      - TZ=America/Sao_Paulo
      - BACKUP_INTERVAL=86400  # 24 horas em segundos
      - BACKUP_RETENTION=30    # Manter backups por 30 dias
      - PROJECT_NAME=ravenna
    
    # Mapeamento de volumes
    volumes:
      # Volumes dos bancos de dados (somente leitura para backup)
      - postgres_chatwoot_data:/backup/source/postgres_chatwoot_data:ro
      - postgres_n8n_data:/backup/source/postgres_n8n_data:ro
      - postgres_evolution_data:/backup/source/postgres_evolution_data:ro
      
      # Volumes de dados dos servi√ßos
      - chatwoot_data:/backup/source/chatwoot_data:ro
      - n8n_data:/backup/source/n8n_data:ro
      - evolution_data:/backup/source/evolution_data:ro
      - portainer_data:/backup/source/portainer_data:ro
      
      # Diret√≥rio de destino dos backups
      - /mnt/backup/ravenna:/backup/destination
      
      # Script de backup
      - ./backup_script.sh:/backup_script.sh:ro
    
    # Comando de inicializa√ß√£o
    command: >
      sh -c "
        echo '=== SISTEMA DE BACKUP PROJETO RAVENNA INICIADO ===' &&
        echo 'Projeto: Ravenna (Chatwoot + N8N + Evolution)' &&
        echo 'Frequ√™ncia: Di√°ria (24h)' &&
        echo 'Reten√ß√£o: 30 dias' &&
        echo 'Destino: /mnt/backup/ravenna/' &&
        echo '======================================================' &&
        
        # Instalar depend√™ncias
        apk add --no-cache tar gzip coreutils findutils &&
        
        # Criar diret√≥rio de backup se n√£o existir
        mkdir -p /backup/destination &&
        
        # Loop infinito para backups peri√≥dicos
        while true; do
          echo '' &&
          echo '[$(date)] === INICIANDO BACKUP RAVENNA ===' &&
          
          # Definir nome do arquivo de backup
          BACKUP_DATE=$(date +%Y%m%d_%H%M%S) &&
          BACKUP_FILE=\"ravenna_backup_$${BACKUP_DATE}.tar.gz\" &&
          BACKUP_PATH=\"/backup/destination/$${BACKUP_FILE}\" &&
          
          echo '[$(date)] Criando backup: $${BACKUP_FILE}' &&
          
          # Criar backup compactado
          cd /backup/source &&
          if [ -d postgres_chatwoot_data ] && [ -d chatwoot_data ]; then
            tar -czf \"$${BACKUP_PATH}\" \
              postgres_chatwoot_data/ \
              postgres_n8n_data/ \
              postgres_evolution_data/ \
              chatwoot_data/ \
              n8n_data/ \
              evolution_data/ \
              portainer_data/ \
              2>/dev/null
          else
            echo '[$(date)] ‚ö†Ô∏è AVISO: Alguns volumes n√£o est√£o dispon√≠veis. Criando backup dos volumes existentes...' &&
            tar -czf \"$${BACKUP_PATH}\" \
              $(find . -maxdepth 1 -type d -name '*data*' 2>/dev/null | head -10) \
              2>/dev/null || echo '[$(date)] ‚ÑπÔ∏è Backup vazio criado (volumes n√£o populados)'
          fi &&
          
          # Verificar se o backup foi criado com sucesso
          if [ -f \"$${BACKUP_PATH}\" ]; then
            BACKUP_SIZE=$(du -h \"$${BACKUP_PATH}\" | cut -f1) &&
            echo '[$(date)] ‚úÖ Backup criado com sucesso!' &&
            echo '[$(date)] üìÅ Arquivo: $${BACKUP_FILE}' &&
            echo '[$(date)] üìä Tamanho: $${BACKUP_SIZE}' &&
            
            # Verificar integridade do backup
            echo '[$(date)] üîç Verificando integridade...' &&
            if tar -tzf \"$${BACKUP_PATH}\" >/dev/null 2>&1; then
              echo '[$(date)] ‚úÖ Integridade verificada com sucesso!' &&
              
              # Remover backups antigos (manter apenas os √∫ltimos 30 dias)
              echo '[$(date)] üßπ Removendo backups antigos...' &&
              find /backup/destination -name \"ravenna_backup_*.tar.gz\" -type f -mtime +$${BACKUP_RETENTION} -delete &&
              
              # Contar backups restantes
              BACKUP_COUNT=$(find /backup/destination -name \"ravenna_backup_*.tar.gz\" -type f | wc -l) &&
              echo '[$(date)] üìà Total de backups mantidos: $${BACKUP_COUNT}' &&
              echo '[$(date)] ‚úÖ Backup conclu√≠do com sucesso!' &&
              echo '[$(date)] ‚è∞ Pr√≥ximo backup em: $${BACKUP_INTERVAL} segundos (24h)'
            else
              echo '[$(date)] ‚ùå ERRO: Backup corrompido detectado!' &&
              rm -f \"$${BACKUP_PATH}\" &&
              echo '[$(date)] üóëÔ∏è Backup corrompido removido'
            fi
          else
            echo '[$(date)] ‚ùå ERRO: Falha ao criar backup!'
          fi &&
          
          echo '[$(date)] === BACKUP RAVENNA FINALIZADO ===' &&
          echo '' &&
          
          # Aguardar pr√≥ximo ciclo
          sleep $${BACKUP_INTERVAL}
        done
      "
    
    # Health check
    healthcheck:
      test: ["CMD", "sh", "-c", "find /backup/destination -name 'ravenna_backup_*.tar.gz' -mtime -2 | grep -q ."]
      interval: 1h
      timeout: 30s
      retries: 3
      start_period: 5m
    
    # Rede compartilhada
    networks:
      - app_network
    
    # Labels para organiza√ß√£o
    labels:
      - "com.projeto.ravenna.backup=true"
      - "com.projeto.ravenna.service=backup"
      - "com.projeto.ravenna.version=1.0"

# Definir volumes locais
volumes:
  # Volumes dos bancos PostgreSQL
  postgres_chatwoot_data:
  postgres_n8n_data:
  postgres_evolution_data:
  
  # Volumes dos servi√ßos
  chatwoot_data:
  n8n_data:
  evolution_data:
  portainer_data:

# Rede compartilhada
networks:
  app_network:
    driver: bridge