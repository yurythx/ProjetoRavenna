# =========================================================
# DOCKER COMPOSE PRINCIPAL - PROJETO RAVENNA
# =========================================================
# Descrição: Arquivo principal para orquestração de todos os serviços
#            do Projeto Ravenna. Este arquivo importa as configurações
#            de cada serviço individual e permite iniciar toda a
#            infraestrutura com um único comando.
# =========================================================

version: '3.8'

# =========================================================
# IMPORTAÇÃO DOS ARQUIVOS DE CONFIGURAÇÃO INDIVIDUAIS
# =========================================================
# Cada serviço possui seu próprio arquivo YAML para facilitar
# a manutenção e organização das configurações
# =========================================================
include:
  - path: ./minio/minio.yml          # Armazenamento de objetos MinIO
  - path: ./chatwoot/chatwoot.yml    # Plataforma de atendimento Chatwoot
  - path: ./n8n/n8n.yml              # Automação de workflows n8n
  - path: ./evolution/evolution.yml  # API WhatsApp Evolution
  - path: ./cloudflare/cloudflare.yml # Túnel Cloudflare

# =========================================================
# SERVIÇOS DE MONITORAMENTO
# =========================================================
# Serviços para coleta de métricas e monitoramento da infraestrutura
# =========================================================
services:
  # =========================================================
  # PROMETHEUS - COLETA DE MÉTRICAS
  # =========================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus_monitoring
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app_network

  # =========================================================
  # GRAFANA - VISUALIZAÇÃO DE MÉTRICAS
  # =========================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana_monitoring
    restart: always
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app_network

  # =========================================================
  # NODE EXPORTER - MÉTRICAS DO SISTEMA
  # =========================================================
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node_exporter
    restart: always
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app_network

  # =========================================================
  # CADVISOR - MÉTRICAS DOS CONTAINERS
  # =========================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: always
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - app_network

  # =========================================================
  # REDIS EXPORTER - MÉTRICAS DO REDIS
  # =========================================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: redis_exporter
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://:${REDIS_PASSWORD}@redis_chatwoot:6379,redis://:${REDIS_PASSWORD}@redis_n8n:6379,redis://:${REDIS_PASSWORD}@redis_evolution:6379
    networks:
      - app_network

  # =========================================================
  # POSTGRES EXPORTER - MÉTRICAS DO POSTGRESQL
  # =========================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: postgres_exporter
    restart: always
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_PASSWORD}@postgres_chatwoot:5432/chatwoot?sslmode=disable
    networks:
      - app_network

# =========================================================
# VOLUMES E REDES
# =========================================================
# Definição de volumes e redes compartilhadas
# =========================================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# NOTA: A rede app_network é definida nos arquivos individuais dos serviços
# para evitar conflitos de importação

# =========================================================
# INSTRUÇÕES DE USO
# =========================================================
# PASSO 1 - CRIAÇÃO DA REDE (OBRIGATÓRIO - EXECUTAR PRIMEIRO):
#   docker network create app_network
#
# PASSO 2 - VERIFICAR CONFIGURAÇÕES:
#   - Revisar CONFIGURACAO_SEGURANCA.md para alterar senhas padrão
#   - Revisar URLS_E_IPS.md para configurar IPs corretos
#   - Configurar token do Cloudflare em cloudflare/cloudflare.yml (se usar)
#
# PASSO 3 - INICIALIZAÇÃO:
#
# OPÇÃO A - INICIALIZAÇÃO COMPLETA (RECOMENDADO):
#   docker-compose up -d
#
# OPÇÃO B - INICIALIZAÇÃO POR ETAPAS (PARA TROUBLESHOOTING):
#   1. Infraestrutura base (OBRIGATÓRIO PRIMEIRO):
#      docker-compose up -d postgres_chatwoot postgres_n8n postgres_evolution redis_chatwoot redis_n8n redis_evolution minio_server
#      # Aguardar 30-60 segundos para inicialização completa
#   
#   2. Serviços principais (DEPENDEM DA INFRAESTRUTURA):
#      docker-compose up -d chatwoot-rails chatwoot-sidekiq
#      docker-compose up -d n8n
#      docker-compose up -d evolution_api
#      # Aguardar cada grupo inicializar antes do próximo
#   
#   3. Acesso externo (OPCIONAL):
#      docker-compose up -d cloudflare_tunnel

# =========================================================
# DEPENDÊNCIAS ENTRE SERVIÇOS
# =========================================================
# PostgreSQL Chatwoot ← Chatwoot
# PostgreSQL N8N ← N8N
# PostgreSQL Evolution ← Evolution API
# Redis Chatwoot ← Chatwoot
# Redis N8N ← N8N
# Redis Evolution ← Evolution API (cache)
# MinIO ← Evolution API (armazenamento de mídia)
# Todos os serviços ← app_network
#
# ORDEM RECOMENDADA DE INICIALIZAÇÃO:
# 1º postgres_chatwoot, postgres_n8n, postgres_evolution, redis_chatwoot, redis_n8n, redis_evolution, minio_server
# 2º chatwoot-rails, chatwoot-sidekiq
# 3º n8n (unificado)
# 4º evolution_api
# 5º cloudflare_tunnel (opcional)
# =========================================================
#
# MONITORAMENTO E DIAGNÓSTICO:
#   docker-compose ps                    # Status dos serviços
#   docker-compose logs -f [serviço]     # Logs em tempo real
#   docker stats                         # Uso de recursos
#   docker network ls                    # Verificar redes
#   docker volume ls                     # Verificar volumes
#
# MANUTENÇÃO:
#   docker-compose restart [serviço]     # Reiniciar serviço específico
#   docker-compose down                  # Parar todos os serviços
#   docker-compose down -v               # Parar e remover volumes (CUIDADO!)
#   docker system prune                  # Limpar recursos não utilizados
# =========================================================