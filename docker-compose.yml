# =========================================================
# DOCKER COMPOSE PRINCIPAL - PROJETO RAVENNA
# =========================================================
# Descrição: Arquivo principal para orquestração de todos os serviços
#            do Projeto Ravenna. Este arquivo importa as configurações
#            de cada serviço individual e permite iniciar toda a
#            infraestrutura com um único comando.
# =========================================================



# =========================================================
# IMPORTAÇÃO DOS ARQUIVOS DE CONFIGURAÇÃO INDIVIDUAIS
# =========================================================
# Cada serviço possui seu próprio arquivo YAML para facilitar
# a manutenção e organização das configurações
# =========================================================
include:
  - path: ./minio/minio.yml          # Armazenamento de objetos MinIO
  - path: ./chatwoot/chatwoot.yml    # Plataforma de atendimento Chatwoot
  - path: ./n8n/n8n.yml              # Automação de workflows n8n
  - path: ./evolution/evolution.yml  # API WhatsApp Evolution
  - path: ./cloudflare/cloudflare.yml # Túnel Cloudflare
  - path: ./portainer/portainer.yml  # Gerenciamento e monitoramento Portainer
  - path: ./backup/backup.yml        # Sistema de backup automatizado

# =========================================================
# VOLUMES E REDES
# =========================================================
# Definição de volumes e redes compartilhadas
# =========================================================

# NOTA: A rede app_network é definida nos arquivos individuais dos serviços
# para evitar conflitos de importação

# =========================================================
# INSTRUÇÕES DE USO
# =========================================================
# PASSO 1 - CRIAÇÃO DA REDE (OBRIGATÓRIO - EXECUTAR PRIMEIRO):
#   docker network create app_network
#
# PASSO 2 - VERIFICAR CONFIGURAÇÕES:
#   - Revisar CONFIGURACAO_SEGURANCA.md para alterar senhas padrão
#   - Revisar URLS_E_IPS.md para configurar IPs corretos
#   - Configurar token do Cloudflare em cloudflare/cloudflare.yml (se usar)
#
# PASSO 3 - INICIALIZAÇÃO:
#
# OPÇÃO A - INICIALIZAÇÃO COMPLETA (RECOMENDADO):
#   docker-compose up -d
#
# OPÇÃO B - INICIALIZAÇÃO POR ETAPAS (PARA TROUBLESHOOTING):
#   1. Infraestrutura base (OBRIGATÓRIO PRIMEIRO):
#      docker-compose up -d postgres_chatwoot postgres_n8n postgres_evolution redis_chatwoot redis_n8n redis_evolution minio_server
#      # Aguardar 30-60 segundos para inicialização completa
#   
#   2. Serviços principais (DEPENDEM DA INFRAESTRUTURA):
#      docker-compose up -d chatwoot-rails chatwoot-sidekiq
#      docker-compose up -d n8n
#      docker-compose up -d evolution_api
#      # Aguardar cada grupo inicializar antes do próximo
#   
#   3. Acesso externo (OPCIONAL):
#      docker-compose up -d cloudflare_tunnel

# =========================================================
# DEPENDÊNCIAS ENTRE SERVIÇOS
# =========================================================
# PostgreSQL Chatwoot ← Chatwoot
# PostgreSQL N8N ← N8N
# PostgreSQL Evolution ← Evolution API
# Redis Chatwoot ← Chatwoot
# Redis N8N ← N8N
# Redis Evolution ← Evolution API (cache)
# MinIO ← Evolution API (armazenamento de mídia)
# Todos os serviços ← app_network
#
# ORDEM RECOMENDADA DE INICIALIZAÇÃO:
# 1º postgres_chatwoot, postgres_n8n, postgres_evolution, redis_chatwoot, redis_n8n, redis_evolution, minio_server
# 2º chatwoot-rails, chatwoot-sidekiq
# 3º n8n (unificado)
# 4º evolution_api
# 5º cloudflare_tunnel (opcional)
# =========================================================
#
# MONITORAMENTO E DIAGNÓSTICO:
#   docker-compose ps                    # Status dos serviços
#   docker-compose logs -f [serviço]     # Logs em tempo real
#   docker stats                         # Uso de recursos
#   docker network ls                    # Verificar redes
#   docker volume ls                     # Verificar volumes
#
# MANUTENÇÃO:
#   docker-compose restart [serviço]     # Reiniciar serviço específico
#   docker-compose down                  # Parar todos os serviços
#   docker-compose down -v               # Parar e remover volumes (CUIDADO!)
#   docker system prune                  # Limpar recursos não utilizados
# =========================================================